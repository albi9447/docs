{
    "swagger": "2.0",
    "info": {
        "title": "Vanilla API",
        "description": "API access to your community.",
        "version": "2.0-alpha"
    },
    "host": "example.com",
    "basePath": "/api/v2",
    "consumes": [
        "application/json",
        "application/x-www-form-urlencoded",
        "multipart/form-data"
    ],
    "paths": {
        "/addons": {
            "get": {
                "tags": [
                    "Addons"
                ],
                "summary": "List addons.",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "description": "The type of addon.\nMust be one of: \"addon\", \"theme\", \"locale\".",
                        "enum": [
                            "addon",
                            "theme",
                            "locale"
                        ]
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "type": "boolean",
                        "description": "Filter enabled or disabled addons."
                    },
                    {
                        "name": "themeType",
                        "in": "query",
                        "type": "string",
                        "description": "Which theme to show the enabled status for.\nMust be one of: \"desktop\", \"mobile\".",
                        "enum": [
                            "desktop",
                            "mobile"
                        ],
                        "default": "desktop"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Addon"
                            }
                        }
                    }
                }
            }
        },
        "/addons/{addonID}": {
            "get": {
                "tags": [
                    "Addons"
                ],
                "summary": "Get an addon.",
                "parameters": [
                    {
                        "name": "addonID",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "minLength": 1,
                        "description": "The ID of the addon."
                    },
                    {
                        "name": "themeType",
                        "in": "query",
                        "type": "string",
                        "description": "Which theme to show the enabled status for.\nMust be one of: \"desktop\", \"mobile\".",
                        "enum": [
                            "desktop",
                            "mobile"
                        ],
                        "default": "desktop"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Addon"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Addons"
                ],
                "summary": "Enable or disable an addon.",
                "parameters": [
                    {
                        "name": "addonID",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "minLength": 1,
                        "description": "The ID of the addon."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable or disable the addon."
                                },
                                "themeType": {
                                    "type": "string",
                                    "description": "Which theme type to set.",
                                    "enum": [
                                        "desktop",
                                        "mobile"
                                    ],
                                    "default": "desktop"
                                }
                            },
                            "required": [
                                "enabled"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Addon"
                            }
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "List categories.",
                "parameters": [
                    {
                        "name": "parentCategoryID",
                        "in": "query",
                        "type": "integer",
                        "description": "Parent category ID."
                    },
                    {
                        "name": "parentCategoryCode",
                        "in": "query",
                        "type": "string",
                        "description": "Parent category URL code."
                    },
                    {
                        "name": "maxDepth",
                        "in": "query",
                        "type": "integer",
                        "description": "",
                        "default": 2
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "categoryID": {
                                        "type": "integer",
                                        "description": "The ID of the category."
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The name of the category."
                                    },
                                    "description": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "minLength": 0,
                                        "description": "The description of the category."
                                    },
                                    "parentCategoryID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "Parent category ID."
                                    },
                                    "customPermissions": {
                                        "type": "boolean",
                                        "description": "Are custom permissions set for this category?"
                                    },
                                    "urlCode": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The URL code of the category."
                                    },
                                    "url": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The URL to the category."
                                    },
                                    "displayAs": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The display style of the category.",
                                        "enum": [
                                            "categories",
                                            "discussions",
                                            "flat",
                                            "heading"
                                        ],
                                        "default": "discussions"
                                    },
                                    "countCategories": {
                                        "type": "integer",
                                        "description": "Total number of child categories."
                                    },
                                    "countDiscussions": {
                                        "type": "integer",
                                        "description": "Total discussions in the category."
                                    },
                                    "countComments": {
                                        "type": "integer",
                                        "description": "Total comments in the category."
                                    },
                                    "countAllDiscussions": {
                                        "type": "integer",
                                        "description": "Total of all discussions in a category and its children."
                                    },
                                    "countAllComments": {
                                        "type": "integer",
                                        "description": "Total of all comments in a category and its children."
                                    },
                                    "depth": {
                                        "type": "integer"
                                    },
                                    "children": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "categoryID": {
                                                    "type": "integer",
                                                    "description": "The ID of the category."
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "description": "The name of the category."
                                                },
                                                "description": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "minLength": 0,
                                                    "description": "The description of the category."
                                                },
                                                "parentCategoryID": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ],
                                                    "description": "Parent category ID."
                                                },
                                                "customPermissions": {
                                                    "type": "boolean",
                                                    "description": "Are custom permissions set for this category?"
                                                },
                                                "urlCode": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "description": "The URL code of the category."
                                                },
                                                "url": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "description": "The URL to the category."
                                                },
                                                "displayAs": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "description": "The display style of the category.",
                                                    "enum": [
                                                        "categories",
                                                        "discussions",
                                                        "flat",
                                                        "heading"
                                                    ],
                                                    "default": "discussions"
                                                },
                                                "countCategories": {
                                                    "type": "integer",
                                                    "description": "Total number of child categories."
                                                },
                                                "countDiscussions": {
                                                    "type": "integer",
                                                    "description": "Total discussions in the category."
                                                },
                                                "countComments": {
                                                    "type": "integer",
                                                    "description": "Total comments in the category."
                                                },
                                                "countAllDiscussions": {
                                                    "type": "integer",
                                                    "description": "Total of all discussions in a category and its children."
                                                },
                                                "countAllComments": {
                                                    "type": "integer",
                                                    "description": "Total of all comments in a category and its children."
                                                },
                                                "depth": {
                                                    "type": "integer"
                                                },
                                                "children": {
                                                    "type": "array"
                                                }
                                            },
                                            "required": [
                                                "categoryID",
                                                "name",
                                                "description",
                                                "parentCategoryID",
                                                "customPermissions",
                                                "urlCode",
                                                "url",
                                                "displayAs",
                                                "countCategories",
                                                "countDiscussions",
                                                "countComments",
                                                "countAllDiscussions",
                                                "countAllComments",
                                                "depth",
                                                "children"
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "categoryID",
                                    "name",
                                    "description",
                                    "parentCategoryID",
                                    "customPermissions",
                                    "urlCode",
                                    "url",
                                    "displayAs",
                                    "countCategories",
                                    "countDiscussions",
                                    "countComments",
                                    "countAllDiscussions",
                                    "countAllComments",
                                    "depth"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Add a category.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CategoryPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "categoryID": {
                                    "type": "integer",
                                    "description": "The ID of the category."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the category."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "The description of the category."
                                },
                                "parentCategoryID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Parent category ID."
                                },
                                "customPermissions": {
                                    "type": "boolean",
                                    "description": "Are custom permissions set for this category?"
                                },
                                "urlCode": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL code of the category."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL to the category."
                                },
                                "displayAs": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The display style of the category.",
                                    "enum": [
                                        "categories",
                                        "discussions",
                                        "flat",
                                        "heading"
                                    ],
                                    "default": "discussions"
                                },
                                "countCategories": {
                                    "type": "integer",
                                    "description": "Total number of child categories."
                                },
                                "countDiscussions": {
                                    "type": "integer",
                                    "description": "Total discussions in the category."
                                },
                                "countComments": {
                                    "type": "integer",
                                    "description": "Total comments in the category."
                                },
                                "countAllDiscussions": {
                                    "type": "integer",
                                    "description": "Total of all discussions in a category and its children."
                                },
                                "countAllComments": {
                                    "type": "integer",
                                    "description": "Total of all comments in a category and its children."
                                }
                            },
                            "required": [
                                "categoryID",
                                "name",
                                "description",
                                "parentCategoryID",
                                "customPermissions",
                                "urlCode",
                                "url",
                                "displayAs",
                                "countCategories",
                                "countDiscussions",
                                "countComments",
                                "countAllDiscussions",
                                "countAllComments"
                            ]
                        }
                    }
                }
            }
        },
        "/categories/search": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Search categories.",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "type": "string",
                        "minLength": 1,
                        "description": "Category name filter."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 200
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "default": false,
                        "description": "Expand with the parent record."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "categoryID": {
                                        "type": "integer",
                                        "description": "The ID of the category."
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The name of the category."
                                    },
                                    "description": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "minLength": 0,
                                        "description": "The description of the category."
                                    },
                                    "parentCategoryID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "Parent category ID."
                                    },
                                    "customPermissions": {
                                        "type": "boolean",
                                        "description": "Are custom permissions set for this category?"
                                    },
                                    "urlCode": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The URL code of the category."
                                    },
                                    "url": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The URL to the category."
                                    },
                                    "displayAs": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The display style of the category.",
                                        "enum": [
                                            "categories",
                                            "discussions",
                                            "flat",
                                            "heading"
                                        ],
                                        "default": "discussions"
                                    },
                                    "countCategories": {
                                        "type": "integer",
                                        "description": "Total number of child categories."
                                    },
                                    "countDiscussions": {
                                        "type": "integer",
                                        "description": "Total discussions in the category."
                                    },
                                    "countComments": {
                                        "type": "integer",
                                        "description": "Total comments in the category."
                                    },
                                    "countAllDiscussions": {
                                        "type": "integer",
                                        "description": "Total of all discussions in a category and its children."
                                    },
                                    "countAllComments": {
                                        "type": "integer",
                                        "description": "Total of all comments in a category and its children."
                                    }
                                },
                                "required": [
                                    "categoryID",
                                    "name",
                                    "description",
                                    "parentCategoryID",
                                    "customPermissions",
                                    "urlCode",
                                    "url",
                                    "displayAs",
                                    "countCategories",
                                    "countDiscussions",
                                    "countComments",
                                    "countAllDiscussions",
                                    "countAllComments"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The category ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "categoryID": {
                                    "type": "integer",
                                    "description": "The ID of the category."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the category."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "The description of the category."
                                },
                                "parentCategoryID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Parent category ID."
                                },
                                "customPermissions": {
                                    "type": "boolean",
                                    "description": "Are custom permissions set for this category?"
                                },
                                "urlCode": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL code of the category."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL to the category."
                                },
                                "displayAs": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The display style of the category.",
                                    "enum": [
                                        "categories",
                                        "discussions",
                                        "flat",
                                        "heading"
                                    ],
                                    "default": "discussions"
                                },
                                "countCategories": {
                                    "type": "integer",
                                    "description": "Total number of child categories."
                                },
                                "countDiscussions": {
                                    "type": "integer",
                                    "description": "Total discussions in the category."
                                },
                                "countComments": {
                                    "type": "integer",
                                    "description": "Total comments in the category."
                                },
                                "countAllDiscussions": {
                                    "type": "integer",
                                    "description": "Total of all discussions in a category and its children."
                                },
                                "countAllComments": {
                                    "type": "integer",
                                    "description": "Total of all comments in a category and its children."
                                }
                            },
                            "required": [
                                "categoryID",
                                "name",
                                "description",
                                "parentCategoryID",
                                "customPermissions",
                                "urlCode",
                                "url",
                                "displayAs",
                                "countCategories",
                                "countDiscussions",
                                "countComments",
                                "countAllDiscussions",
                                "countAllComments"
                            ]
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The category ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CategoryPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "categoryID": {
                                    "type": "integer",
                                    "description": "The ID of the category."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the category."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "The description of the category."
                                },
                                "parentCategoryID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Parent category ID."
                                },
                                "customPermissions": {
                                    "type": "boolean",
                                    "description": "Are custom permissions set for this category?"
                                },
                                "urlCode": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL code of the category."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL to the category."
                                },
                                "displayAs": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The display style of the category.",
                                    "enum": [
                                        "categories",
                                        "discussions",
                                        "flat",
                                        "heading"
                                    ],
                                    "default": "discussions"
                                },
                                "countCategories": {
                                    "type": "integer",
                                    "description": "Total number of child categories."
                                },
                                "countDiscussions": {
                                    "type": "integer",
                                    "description": "Total discussions in the category."
                                },
                                "countComments": {
                                    "type": "integer",
                                    "description": "Total comments in the category."
                                },
                                "countAllDiscussions": {
                                    "type": "integer",
                                    "description": "Total of all discussions in a category and its children."
                                },
                                "countAllComments": {
                                    "type": "integer",
                                    "description": "Total of all comments in a category and its children."
                                }
                            },
                            "required": [
                                "categoryID",
                                "name",
                                "description",
                                "parentCategoryID",
                                "customPermissions",
                                "urlCode",
                                "url",
                                "displayAs",
                                "countCategories",
                                "countDiscussions",
                                "countComments",
                                "countAllDiscussions",
                                "countAllComments"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The category ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/categories/{id}/edit": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The category ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "categoryID": {
                                    "type": "integer",
                                    "description": "The ID of the category."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the category."
                                },
                                "parentCategoryID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Parent category ID."
                                },
                                "urlCode": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL code of the category."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "The description of the category."
                                },
                                "displayAs": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The display style of the category.",
                                    "enum": [
                                        "categories",
                                        "discussions",
                                        "flat",
                                        "heading"
                                    ],
                                    "default": "discussions"
                                }
                            },
                            "required": [
                                "categoryID",
                                "name",
                                "parentCategoryID",
                                "urlCode",
                                "description",
                                "displayAs"
                            ]
                        }
                    }
                }
            }
        },
        "/comments": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "List comments.",
                "parameters": [
                    {
                        "name": "dateInserted",
                        "in": "query"
                    },
                    {
                        "name": "dateUpdated",
                        "in": "query"
                    },
                    {
                        "name": "discussionID",
                        "in": "query",
                        "type": "integer",
                        "description": "The discussion ID."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": "30",
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "insertUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by author."
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Comment"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Comments"
                ],
                "summary": "Add a comment.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommentPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }
                }
            }
        },
        "/comments/{id}": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Get a comment.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The comment ID."
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Comments"
                ],
                "summary": "Update a comment.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The comment ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommentPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Comments"
                ],
                "summary": "Delete a comment.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The comment ID."
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/comments/{id}/edit": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Get a comment for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The comment ID."
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "commentID": {
                                    "type": "integer",
                                    "description": "The ID of the comment."
                                },
                                "discussionID": {
                                    "type": "integer",
                                    "description": "The ID of the discussion."
                                },
                                "body": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The body of the comment."
                                },
                                "format": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The input format of the comment."
                                }
                            },
                            "required": [
                                "commentID",
                                "discussionID",
                                "body",
                                "format"
                            ]
                        }
                    }
                }
            }
        },
        "/conversations": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "List user conversations.",
                "parameters": [
                    {
                        "name": "insertUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by author. (Has no effect if participantUserID is used)"
                    },
                    {
                        "name": "participantUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by participating user."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": "50",
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Conversation"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Add a conversation.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConversationPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Conversation"
                        }
                    }
                }
            }
        },
        "/conversations/{id}": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Get a conversation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The conversation ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Conversation"
                        }
                    }
                }
            }
        },
        "/conversations/{id}/leave": {
            "delete": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Leave a conversation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The conversation ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/conversations/{id}/participants": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Get participants of a conversation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The conversation ID."
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by participant status.\nMust be one of: \"all\", \"participating\", \"deleted\".",
                        "enum": [
                            "all",
                            "participating",
                            "deleted"
                        ],
                        "default": "participating"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 5,
                        "minimum": 5,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "user"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of participants.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "userID": {
                                        "type": "integer",
                                        "description": "The userID of the participant."
                                    },
                                    "user": {
                                        "$ref": "#/definitions/UserFragment"
                                    },
                                    "status": {
                                        "description": "Participation status of the user.",
                                        "type": "string",
                                        "enum": [
                                            "participating",
                                            "deleted"
                                        ]
                                    }
                                }
                            },
                            "description": "List of participants."
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Add participants to a conversation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The conversation ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConversationPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Conversation"
                        }
                    }
                }
            }
        },
        "/discussions": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "List discussions.",
                "parameters": [
                    {
                        "name": "categoryID",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by a category."
                    },
                    {
                        "name": "dateInserted",
                        "in": "query"
                    },
                    {
                        "name": "dateUpdated",
                        "in": "query"
                    },
                    {
                        "name": "pinned",
                        "in": "query",
                        "type": "boolean",
                        "description": "Whether or not to include pinned discussions. If true, only return pinned discussions. Cannot be used with the pinOrder parameter."
                    },
                    {
                        "name": "pinOrder",
                        "in": "query",
                        "type": "string",
                        "default": "first",
                        "description": "If including pinned posts, in what order should they be integrated? When \"first\", discussions pinned to a specific category will only be affected if the discussion's category is passed as the categoryID parameter. Cannot be used with the pinned parameter.\nMust be one of: \"first\", \"mixed\".",
                        "enum": [
                            "first",
                            "mixed"
                        ]
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "insertUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by author."
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "lastUser",
                                "lastPost",
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    },
                    {
                        "name": "groupID",
                        "in": "query",
                        "type": [
                            "integer",
                            "null"
                        ],
                        "description": "The group the discussion is in."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Discussion"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Add a discussion.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscussionPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Discussion"
                        }
                    }
                }
            }
        },
        "/discussions/bookmarked": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Get a list of the current user's bookmarked discussions.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "lastUser",
                                "lastPost"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Discussion"
                            }
                        }
                    }
                }
            }
        },
        "/discussions/{id}": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Get a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The discussion ID."
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Discussion"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Update a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The discussion ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscussionPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Discussion"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Delete a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The discussion ID."
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/discussions/{id}/bookmark": {
            "put": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Bookmark a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The discussion ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "bookmarked": {
                                    "type": "boolean",
                                    "description": "Pass true to bookmark or false to remove bookmark."
                                }
                            },
                            "required": [
                                "bookmarked"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "bookmarked": {
                                    "type": "boolean",
                                    "description": "The current bookmark value."
                                }
                            },
                            "required": [
                                "bookmarked"
                            ]
                        }
                    }
                }
            }
        },
        "/discussions/{id}/edit": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Get a discussion for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The discussion ID."
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DiscussionGetEdit"
                        }
                    }
                }
            }
        },
        "/drafts": {
            "get": {
                "tags": [
                    "Drafts"
                ],
                "summary": "List drafts created by the current user.",
                "parameters": [
                    {
                        "name": "recordType",
                        "in": "query",
                        "type": "string",
                        "description": "Filter drafts by record type.\nMust be one of: \"comment\", \"discussion\".",
                        "enum": [
                            "comment",
                            "discussion"
                        ]
                    },
                    {
                        "name": "parentRecordID",
                        "in": "query",
                        "type": [
                            "integer",
                            "null"
                        ],
                        "description": "Filter by the unique ID of the parent for a draft. Used with recordType.",
                        "default": null
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "draftID": {
                                        "type": "integer",
                                        "description": "The unique ID of the draft."
                                    },
                                    "recordType": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The type of record associated with this draft.",
                                        "enum": [
                                            "comment",
                                            "discussion"
                                        ]
                                    },
                                    "parentRecordID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "The unique ID of the intended parent to this record."
                                    },
                                    "attributes": {
                                        "type": "object",
                                        "description": "A free-form object containing all custom data for this draft."
                                    },
                                    "insertUserID": {
                                        "type": "integer",
                                        "description": "The unique ID of the user who created this draft."
                                    },
                                    "dateInserted": {
                                        "type": "string",
                                        "description": "When the draft was created.",
                                        "format": "date-time"
                                    },
                                    "updateUserID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "The unique ID of the user who updated this draft."
                                    },
                                    "dateUpdated": {
                                        "type": [
                                            "datetime",
                                            "null"
                                        ],
                                        "description": "When the draft was updated."
                                    }
                                },
                                "required": [
                                    "draftID",
                                    "recordType",
                                    "parentRecordID",
                                    "attributes",
                                    "insertUserID",
                                    "dateInserted",
                                    "updateUserID",
                                    "dateUpdated"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Create a draft.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DraftPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "draftID": {
                                    "type": "integer",
                                    "description": "The unique ID of the draft."
                                },
                                "recordType": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The type of record associated with this draft.",
                                    "enum": [
                                        "comment",
                                        "discussion"
                                    ]
                                },
                                "parentRecordID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the intended parent to this record."
                                },
                                "attributes": {
                                    "type": "object",
                                    "description": "A free-form object containing all custom data for this draft."
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The unique ID of the user who created this draft."
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the draft was created.",
                                    "format": "date-time"
                                },
                                "updateUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the user who updated this draft."
                                },
                                "dateUpdated": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the draft was updated."
                                }
                            },
                            "required": [
                                "draftID",
                                "recordType",
                                "parentRecordID",
                                "attributes",
                                "insertUserID",
                                "dateInserted",
                                "updateUserID",
                                "dateUpdated"
                            ]
                        }
                    }
                }
            }
        },
        "/drafts/{id}": {
            "get": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Get a draft.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The draft ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "draftID": {
                                    "type": "integer",
                                    "description": "The unique ID of the draft."
                                },
                                "recordType": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The type of record associated with this draft.",
                                    "enum": [
                                        "comment",
                                        "discussion"
                                    ]
                                },
                                "parentRecordID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the intended parent to this record."
                                },
                                "attributes": {
                                    "type": "object",
                                    "description": "A free-form object containing all custom data for this draft."
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The unique ID of the user who created this draft."
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the draft was created.",
                                    "format": "date-time"
                                },
                                "updateUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the user who updated this draft."
                                },
                                "dateUpdated": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the draft was updated."
                                }
                            },
                            "required": [
                                "draftID",
                                "recordType",
                                "parentRecordID",
                                "attributes",
                                "insertUserID",
                                "dateInserted",
                                "updateUserID",
                                "dateUpdated"
                            ]
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Update a draft.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The draft ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DraftPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "draftID": [],
                                "parentRecordID": [],
                                "attributes": []
                            },
                            "required": [
                                "draftID",
                                "parentRecordID",
                                "attributes"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Delete a draft.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The draft ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/drafts/{id}/edit": {
            "get": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Get a draft for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The draft ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "draftID": [],
                                "parentRecordID": [],
                                "attributes": []
                            },
                            "required": [
                                "draftID",
                                "parentRecordID",
                                "attributes"
                            ]
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "List events.",
                "parameters": [
                    {
                        "name": "groupID",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by group ID."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "dateInserted",
                            "-dateInserted",
                            "dateStarts",
                            "-dateStarts"
                        ],
                        "description": "Sort the results by the specified field. The default sort order is ascending.Prefixing the field with \"-\" will sort using a descending order.\nMust be one of: \"dateInserted\", \"-dateInserted\", \"dateStarts\", \"-dateStarts\"."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "Expand associated records."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Event"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Create an event.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EventPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get an event.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The event ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Events"
                ],
                "summary": "Update an event.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The event ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EventPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Delete an event.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The event ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/events/{id}/edit": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get an event for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The event ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            }
        },
        "/events/{id}/participants": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get event's participants.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The event ID."
                    },
                    {
                        "name": "attending",
                        "in": "query",
                        "type": "string",
                        "default": "all",
                        "enum": [
                            "yes",
                            "no",
                            "maybe",
                            "answered",
                            "unanswered",
                            "all"
                        ],
                        "description": "Filter participant by attending status.\nMust be one of: \"yes\", \"no\", \"maybe\", \"answered\", \"unanswered\", \"all\"."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "Expand associated records."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Event"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "RSVP to an event.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The event ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": {
                                    "type": "string",
                                    "description": "The ID of the user that RSVP."
                                },
                                "attending": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "enum": [
                                        "yes",
                                        "no",
                                        "maybe"
                                    ],
                                    "description": "Is the participant attending the event."
                                }
                            },
                            "required": [
                                "attending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            }
        },
        "/groups": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "List groups.",
                "parameters": [
                    {
                        "name": "memberID",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by member userID."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "dateInserted",
                            "-dateInserted",
                            "dateLastComment",
                            "-dateLastComment",
                            "countMembers",
                            "-countMembers",
                            "countDiscussions",
                            "-countDiscussions"
                        ],
                        "description": "Sort the results by the specified field. The default sort order is ascending.Prefixing the field with \"-\" will sort using a descending order.\nMust be one of: \"dateInserted\", \"-dateInserted\", \"dateLastComment\", \"-dateLastComment\", \"countMembers\", \"-countMembers\", \"countDiscussions\", \"-countDiscussions\"."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "Expand associated records."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Create a group.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            }
        },
        "/groups/{id}": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Groups"
                ],
                "summary": "Update a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/groups/{id}/applicants": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "List applicants to a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "Expand associated records."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GroupApplicant"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Apply to a private group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "reason": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 200,
                                    "description": "The reason why the user wants to apply to this group."
                                }
                            },
                            "required": [
                                "reason"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupApplicant"
                        }
                    }
                }
            }
        },
        "/groups/{id}/applicants/{userID}": {
            "patch": {
                "tags": [
                    "Groups"
                ],
                "summary": "Approve or deny a group applicant.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group member user ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "state": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "enum": [
                                        "approved",
                                        "denied"
                                    ],
                                    "description": "The status of the applicant."
                                }
                            },
                            "required": [
                                "state"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupApplicant"
                        }
                    }
                }
            }
        },
        "/groups/{id}/apply": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Apply to a private group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "reason": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 200,
                                    "description": "The reason why the user wants to apply to this group."
                                }
                            },
                            "required": [
                                "reason"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupApplicant"
                        }
                    }
                }
            }
        },
        "/groups/{id}/edit": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get a group for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            }
        },
        "/groups/{id}/invites": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "List the invites for a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "Expand associated records."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GroupInvite"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Invite a user to a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "userID"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupInvite"
                        }
                    }
                }
            }
        },
        "/groups/{id}/invites/{userID}": {
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete an invite to a user from a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group member user ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/groups/{id}/join": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Join a public group or a group that you have been invited to.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupMember"
                        }
                    }
                }
            }
        },
        "/groups/{id}/leave": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Leave a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/groups/{id}/members": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "List members of a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "Expand associated records."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GroupMember"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Add a user to a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": {
                                    "type": "integer",
                                    "description": "The ID of the user."
                                },
                                "role": {
                                    "type": "string",
                                    "default": "member",
                                    "enum": [
                                        "leader",
                                        "member"
                                    ],
                                    "description": "The role of the user for that group."
                                }
                            },
                            "required": [
                                "userID"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupMember"
                        }
                    }
                }
            }
        },
        "/groups/{id}/members/{userID}": {
            "patch": {
                "tags": [
                    "Groups"
                ],
                "summary": "Change a user's role within a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group member user ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "role": {
                                    "type": "string",
                                    "minLength": 1,
                                    "enum": [
                                        "leader",
                                        "member"
                                    ],
                                    "description": "The role of the user for that group."
                                }
                            },
                            "required": [
                                "role"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupMember"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Remove a user from a group or leave a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "default": null,
                        "type": "integer",
                        "description": "The group member user ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/invites": {
            "get": {
                "tags": [
                    "Invites"
                ],
                "summary": "Get a list of invites sent by the current user.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "acceptedUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "inviteID": {
                                        "type": "integer",
                                        "description": "A unique numerical ID for the invite."
                                    },
                                    "email": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The email address associated with an invite."
                                    },
                                    "code": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "An invite code."
                                    },
                                    "status": {
                                        "description": "Current status for the invite.",
                                        "enum": [
                                            "accepted",
                                            "pending"
                                        ]
                                    },
                                    "insertUserID": {
                                        "type": "integer",
                                        "description": "User who created the invite."
                                    },
                                    "dateInserted": {
                                        "type": "string",
                                        "description": "When the invite was created.",
                                        "format": "date-time"
                                    },
                                    "acceptedUser": {
                                        "$ref": "#/definitions/UserFragment"
                                    },
                                    "acceptedUserID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "User who accepted the invite."
                                    },
                                    "dateAccepted": {
                                        "type": [
                                            "datetime",
                                            "null"
                                        ],
                                        "description": "When the invite was accepted."
                                    },
                                    "dateExpires": {
                                        "type": [
                                            "datetime",
                                            "null"
                                        ],
                                        "description": "When the expiration is set to expire."
                                    }
                                },
                                "required": [
                                    "inviteID",
                                    "email",
                                    "code",
                                    "status",
                                    "insertUserID",
                                    "dateInserted",
                                    "acceptedUserID",
                                    "dateAccepted",
                                    "dateExpires"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Invites"
                ],
                "summary": "Create a new invite.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The email address where the invite should be sent."
                                }
                            },
                            "required": [
                                "email"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "inviteID": {
                                    "type": "integer",
                                    "description": "A unique numerical ID for the invite."
                                },
                                "email": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The email address associated with an invite."
                                },
                                "code": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "An invite code."
                                },
                                "status": {
                                    "description": "Current status for the invite.",
                                    "enum": [
                                        "accepted",
                                        "pending"
                                    ]
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "User who created the invite."
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the invite was created.",
                                    "format": "date-time"
                                },
                                "acceptedUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "acceptedUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "User who accepted the invite."
                                },
                                "dateAccepted": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the invite was accepted."
                                },
                                "dateExpires": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the expiration is set to expire."
                                }
                            },
                            "required": [
                                "inviteID",
                                "email",
                                "code",
                                "status",
                                "insertUserID",
                                "dateInserted",
                                "acceptedUserID",
                                "dateAccepted",
                                "dateExpires"
                            ]
                        }
                    }
                }
            }
        },
        "/invites/{id}": {
            "get": {
                "tags": [
                    "Invites"
                ],
                "summary": "Get an invite.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The invite ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "inviteID": {
                                    "type": "integer",
                                    "description": "A unique numerical ID for the invite."
                                },
                                "email": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The email address associated with an invite."
                                },
                                "code": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "An invite code."
                                },
                                "status": {
                                    "description": "Current status for the invite.",
                                    "enum": [
                                        "accepted",
                                        "pending"
                                    ]
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "User who created the invite."
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the invite was created.",
                                    "format": "date-time"
                                },
                                "acceptedUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "acceptedUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "User who accepted the invite."
                                },
                                "dateAccepted": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the invite was accepted."
                                },
                                "dateExpires": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the expiration is set to expire."
                                }
                            },
                            "required": [
                                "inviteID",
                                "email",
                                "code",
                                "status",
                                "insertUserID",
                                "dateInserted",
                                "acceptedUserID",
                                "dateAccepted",
                                "dateExpires"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Invites"
                ],
                "summary": "Delete an invite.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The invite ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/messages": {
            "get": {
                "tags": [
                    "Messages"
                ],
                "summary": "List user messages.",
                "parameters": [
                    {
                        "name": "conversationID",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by conversation."
                    },
                    {
                        "name": "insertUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by author."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": "50",
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Message"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Messages"
                ],
                "summary": "Add a message.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MessagePost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    }
                }
            }
        },
        "/messages/{id}": {
            "get": {
                "tags": [
                    "Messages"
                ],
                "summary": "Get a message.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The message ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "List roles.",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "permissions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Role"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Add a role.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RolePost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The role ID."
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                        "default": false,
                        "items": {
                            "enum": [
                                "permissions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update a role.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The role ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RolePost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The role ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/roles/{id}/edit": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The role ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "roleID": {
                                    "type": "integer",
                                    "description": "ID of the role."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Name of the role."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Description of the role."
                                },
                                "type": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Default type of this role."
                                },
                                "deletable": {
                                    "type": "boolean",
                                    "description": "Is the role deletable?"
                                },
                                "canSession": {
                                    "type": "boolean",
                                    "description": "Can users in this role start a session?"
                                },
                                "personalInfo": {
                                    "type": "boolean",
                                    "description": "Is membership in this role personal information?"
                                }
                            },
                            "required": [
                                "roleID",
                                "name",
                                "description",
                                "type",
                                "deletable",
                                "canSession",
                                "personalInfo"
                            ]
                        }
                    }
                }
            }
        },
        "/roles/{id}/permissions": {
            "patch": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update permissions on a role",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Roles"
                ],
                "summary": "Overwrite all permissions for a role.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array"
                        }
                    }
                }
            }
        },
        "/tokens": {
            "get": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Get a list of access token IDs for the current user.",
                "parameters": [
                    {
                        "name": "accessTokenID",
                        "in": "query"
                    },
                    {
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "name": "dateInserted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Token"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Issue a new access token for the current user.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Token"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Token"
                        }
                    }
                }
            }
        },
        "/tokens/{id}": {
            "get": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Reveal a usable access token.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The numeric ID of a token."
                    },
                    {
                        "name": "transientKey",
                        "in": "query",
                        "type": "string",
                        "minLength": 1,
                        "description": "A valid CSRF token for the current user."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Token"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Revoke an access token.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The numeric ID of a token."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users.",
                "parameters": [
                    {
                        "name": "dateInserted",
                        "in": "query"
                    },
                    {
                        "name": "dateUpdated",
                        "in": "query"
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "type": "array",
                        "description": "One or more user IDs to lookup.",
                        "items": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "Page number.",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "The number of items per page.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Add a user.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Submit a new user registration.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "An email address for this user."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The username."
                                },
                                "password": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "A password for this user."
                                },
                                "discoveryText": {
                                    "type": "string",
                                    "description": "Why does the user wish to join? Only used when the registration is flagged as SPAM (response code: 202)."
                                },
                                "invitationCode": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "An invitation code for registering on the site."
                                }
                            },
                            "required": [
                                "email",
                                "name",
                                "password",
                                "invitationCode"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": [],
                                "name": [],
                                "email": []
                            },
                            "required": [
                                "userID",
                                "name",
                                "email"
                            ]
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The user ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The user ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The user ID."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/users/{id}/ban": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Ban a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The user ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "banned": {
                                    "type": "boolean",
                                    "description": "Pass true to ban or false to unban."
                                }
                            },
                            "required": [
                                "banned"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "banned": {
                                    "type": "boolean",
                                    "description": "The current banned value."
                                }
                            },
                            "required": [
                                "banned"
                            ]
                        }
                    }
                }
            }
        },
        "/users/{id}/edit": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a user for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The user ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": {
                                    "type": "integer",
                                    "description": "ID of the user."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Name of the user."
                                },
                                "email": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Email address of the user."
                                },
                                "photo": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Raw photo field value from the user record."
                                },
                                "emailConfirmed": {
                                    "type": "boolean",
                                    "description": "Has the email address for this user been confirmed?"
                                },
                                "bypassSpam": {
                                    "type": "boolean",
                                    "description": "Should submissions from this user bypass SPAM checks?"
                                }
                            },
                            "required": [
                                "userID",
                                "name",
                                "email",
                                "photo",
                                "emailConfirmed",
                                "bypassSpam"
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Addon": {
            "type": "object",
            "properties": {
                "addonID": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The ID of the addon used for API calls."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the addon."
                },
                "key": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The unique key that identifies the addon"
                },
                "type": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The type of addon.",
                    "enum": [
                        "addon",
                        "theme",
                        "locale"
                    ]
                },
                "description": {
                    "type": "string",
                    "description": "The addon's description"
                },
                "iconUrl": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The addon's icon.",
                    "format": "uri"
                },
                "version": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The addon's version."
                },
                "require": {
                    "type": "array",
                    "description": "An array of addons that are required to enable the addon.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "addonID": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The ID of the addon used for API calls."
                            },
                            "name": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The name of the addon."
                            },
                            "key": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The unique key that identifies the addon"
                            },
                            "type": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The type of addon.",
                                "enum": [
                                    "addon",
                                    "theme",
                                    "locale"
                                ]
                            },
                            "constraint": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The version requirement."
                            }
                        },
                        "required": [
                            "addonID",
                            "name",
                            "key",
                            "type",
                            "constraint"
                        ]
                    }
                },
                "conflict": {
                    "type": "array",
                    "description": "An array of addons that conflict with this addon.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "addonID": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The ID of the addon used for API calls."
                            },
                            "name": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The name of the addon."
                            },
                            "key": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The unique key that identifies the addon"
                            },
                            "type": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The type of addon.",
                                "enum": [
                                    "addon",
                                    "theme",
                                    "locale"
                                ]
                            },
                            "constraint": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The version requirement."
                            }
                        },
                        "required": [
                            "addonID",
                            "name",
                            "key",
                            "type",
                            "constraint"
                        ]
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the addon is enabled."
                }
            },
            "required": [
                "addonID",
                "name",
                "key",
                "type",
                "iconUrl",
                "version",
                "enabled"
            ]
        },
        "CategoryPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the category."
                },
                "parentCategoryID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "Parent category ID."
                },
                "urlCode": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The URL code of the category."
                },
                "displayAs": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The display style of the category.",
                    "enum": [
                        "categories",
                        "discussions",
                        "flat",
                        "heading"
                    ],
                    "default": "discussions"
                },
                "customPermissions": {
                    "type": "boolean",
                    "description": "Are custom permissions set for this category?"
                }
            },
            "required": [
                "name",
                "urlCode"
            ]
        },
        "Comment": {
            "type": "object",
            "properties": {
                "commentID": {
                    "type": "integer",
                    "description": "The ID of the comment."
                },
                "discussionID": {
                    "type": "integer",
                    "description": "The ID of the discussion."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the comment."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the comment."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the comment was created.",
                    "format": "date-time"
                },
                "dateUpdated": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the comment was last updated."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the comment."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "url": {
                    "type": "string",
                    "description": "The full URL to the comment."
                }
            },
            "required": [
                "commentID",
                "discussionID",
                "body",
                "format",
                "dateInserted",
                "dateUpdated",
                "insertUserID"
            ]
        },
        "CommentPost": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the comment."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the comment."
                },
                "discussionID": {
                    "type": "integer",
                    "description": "The ID of the discussion."
                }
            },
            "required": [
                "body",
                "format",
                "discussionID"
            ]
        },
        "Conversation": {
            "type": "object",
            "properties": {
                "conversationID": {
                    "type": "integer",
                    "description": "The ID of the conversation."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the conversation was created.",
                    "format": "date-time"
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the conversation."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "countParticipants": {
                    "type": "integer",
                    "description": "The number of participants on the conversation."
                },
                "countMessages": {
                    "type": "integer",
                    "description": "The number of messages on the conversation."
                },
                "countReadMessages": {
                    "type": [
                        "null",
                        "integer"
                    ],
                    "description": "The number of unread messages by the current user on the conversation."
                },
                "dateLastViewed": {
                    "type": [
                        "null",
                        "datetime"
                    ],
                    "description": "When the conversation was last viewed by the current user."
                }
            },
            "required": [
                "conversationID",
                "dateInserted",
                "insertUserID",
                "countParticipants",
                "countMessages"
            ]
        },
        "ConversationPost": {
            "type": "object",
            "properties": {
                "participantUserIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of userID of the participants."
                }
            },
            "required": [
                "participantUserIDs"
            ]
        },
        "Discussion": {
            "type": "object",
            "properties": {
                "discussionID": {
                    "type": "integer",
                    "description": "The ID of the discussion."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The title of the discussion."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the discussion."
                },
                "categoryID": {
                    "type": "integer",
                    "description": "The category the discussion is in."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the discussion was created.",
                    "format": "date-time"
                },
                "dateUpdated": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the discussion was last updated."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the discussion."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "lastUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "pinned": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been pinned."
                },
                "pinLocation": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "enum": [
                        "category",
                        "recent"
                    ],
                    "description": "The location for the discussion, if pinned. \"category\" are pinned to their own category. \"recent\" are pinned to the recent discussions list, as well as their own category."
                },
                "closed": {
                    "type": "boolean",
                    "description": "Whether the discussion is closed or open."
                },
                "sink": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been sunk."
                },
                "countComments": {
                    "type": "integer",
                    "description": "The number of comments on the discussion."
                },
                "countViews": {
                    "type": "integer",
                    "description": "The number of views on the discussion."
                },
                "url": {
                    "type": "string",
                    "description": "The full URL to the discussion."
                },
                "lastPost": {
                    "$ref": "#/definitions/PostFragment"
                },
                "bookmarked": {
                    "type": "boolean",
                    "description": "Whether or not the discussion is bookmarked by the current user."
                },
                "unread": {
                    "type": "boolean",
                    "description": "Whether or not the discussion should have an unread indicator."
                },
                "countUnread": {
                    "type": "integer",
                    "description": "The number of unread comments."
                },
                "groupID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The group the discussion is in."
                }
            },
            "required": [
                "discussionID",
                "name",
                "body",
                "categoryID",
                "dateInserted",
                "dateUpdated",
                "insertUserID",
                "pinLocation",
                "closed",
                "sink",
                "countComments",
                "countViews",
                "bookmarked",
                "unread"
            ]
        },
        "DiscussionGetEdit": {
            "type": "object",
            "properties": {
                "discussionID": {
                    "type": "integer",
                    "description": "The ID of the discussion."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The title of the discussion."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the discussion."
                },
                "format": [],
                "categoryID": {
                    "type": "integer",
                    "description": "The category the discussion is in."
                },
                "sink": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been sunk."
                },
                "closed": {
                    "type": "boolean",
                    "description": "Whether the discussion is closed or open."
                },
                "pinned": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been pinned."
                },
                "pinLocation": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "enum": [
                        "category",
                        "recent"
                    ],
                    "description": "The location for the discussion, if pinned. \"category\" are pinned to their own category. \"recent\" are pinned to the recent discussions list, as well as their own category."
                },
                "groupID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The group the discussion is in."
                }
            },
            "required": [
                "discussionID",
                "name",
                "body",
                "format",
                "categoryID",
                "sink",
                "closed",
                "pinned",
                "pinLocation"
            ]
        },
        "DiscussionPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The title of the discussion."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the discussion."
                },
                "format": [],
                "categoryID": {
                    "type": "integer",
                    "description": "The category the discussion is in."
                },
                "closed": {
                    "type": "boolean",
                    "description": "Whether the discussion is closed or open."
                },
                "sink": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been sunk."
                },
                "pinned": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been pinned."
                },
                "pinLocation": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "enum": [
                        "category",
                        "recent"
                    ],
                    "description": "The location for the discussion, if pinned. \"category\" are pinned to their own category. \"recent\" are pinned to the recent discussions list, as well as their own category."
                },
                "groupID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The group the discussion is in."
                }
            },
            "required": [
                "name",
                "body",
                "format"
            ]
        },
        "DraftPost": {
            "type": "object",
            "properties": {
                "recordType": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The type of record associated with this draft.",
                    "enum": [
                        "comment",
                        "discussion"
                    ]
                },
                "parentRecordID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The unique ID of the intended parent to this record."
                },
                "attributes": {
                    "type": "object",
                    "description": "A free-form object containing all custom data for this draft."
                }
            },
            "required": [
                "recordType",
                "attributes"
            ]
        },
        "Event": {
            "type": "object",
            "properties": {
                "eventID": {
                    "type": "integer",
                    "description": "The ID of the event."
                },
                "userID": {
                    "type": "integer",
                    "description": "The user ID of the participant."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the event was created.",
                    "format": "date-time"
                },
                "attending": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "enum": [
                        "yes",
                        "no",
                        "maybe"
                    ],
                    "description": "Is the participant attending the event."
                }
            },
            "required": [
                "eventID",
                "userID",
                "dateInserted",
                "attending"
            ]
        },
        "EventPost": {
            "type": "object",
            "properties": {
                "groupID": {
                    "type": "integer",
                    "description": "The group the event is in."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the event."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The description of the event."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the event."
                },
                "location": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "The location of the event."
                },
                "dateStarts": {
                    "type": "string",
                    "description": "When the event starts.",
                    "format": "date-time"
                },
                "dateEnds": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the event ends."
                }
            },
            "required": [
                "groupID",
                "name",
                "body",
                "format",
                "location",
                "dateStarts"
            ]
        },
        "Group": {
            "type": "object",
            "properties": {
                "groupID": {
                    "type": "integer",
                    "description": "The ID of the group."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the group."
                },
                "description": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The description of the group."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the group."
                },
                "iconUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The URL of the icon of the group."
                },
                "bannerUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The URL of the banner of the group."
                },
                "privacy": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "public",
                        "private"
                    ],
                    "description": "The privacy level of the group's content."
                }
            },
            "required": [
                "groupID",
                "name",
                "description",
                "format",
                "iconUrl",
                "bannerUrl",
                "privacy"
            ]
        },
        "GroupApplicant": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The user ID of the applicant."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "state": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "enum": [
                        "approved",
                        "denied"
                    ],
                    "description": "The status of the applicant."
                },
                "reason": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The reason why the applicant wants to join the group."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Universal record field. Content of \"reason\"."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Universal record field. Format of \"reason\"."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the applicant was created.",
                    "format": "date-time"
                }
            },
            "required": [
                "userID",
                "state",
                "reason",
                "body",
                "format",
                "dateInserted"
            ]
        },
        "GroupInvite": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The ID of the user that has been invited."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the invite was issued.",
                    "format": "date-time"
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the invite."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                }
            },
            "required": [
                "userID",
                "dateInserted",
                "insertUserID"
            ]
        },
        "GroupMember": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The user ID of the member of the group."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the user was added to the group.",
                    "format": "date-time"
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that added this user to the group."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "role": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "leader",
                        "member"
                    ],
                    "description": "The role of the user for that group."
                }
            },
            "required": [
                "userID",
                "dateInserted",
                "insertUserID",
                "role"
            ]
        },
        "GroupPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the group."
                },
                "description": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The description of the group."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the group."
                },
                "iconUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The URL of the icon of the group."
                },
                "bannerUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The URL of the banner of the group."
                },
                "privacy": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "public",
                        "private"
                    ],
                    "description": "The privacy level of the group's content."
                }
            },
            "required": [
                "name",
                "description",
                "format",
                "privacy"
            ]
        },
        "Message": {
            "type": "object",
            "properties": {
                "messageID": {
                    "type": "integer",
                    "description": "The ID of the message."
                },
                "conversationID": {
                    "type": "integer",
                    "description": "The ID of the conversation."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 2000,
                    "description": "The body of the message."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the message."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the message was created.",
                    "format": "date-time"
                }
            },
            "required": [
                "messageID",
                "conversationID",
                "body",
                "insertUserID",
                "dateInserted"
            ]
        },
        "MessagePost": {
            "type": "object",
            "properties": {
                "conversationID": {
                    "type": "integer",
                    "description": "The ID of the conversation."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 2000,
                    "description": "The body of the message."
                },
                "format": {
                    "type": "string",
                    "description": "The input format of the record."
                }
            },
            "required": [
                "conversationID",
                "body"
            ]
        },
        "PermissionFragment": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "global",
                        "category"
                    ]
                },
                "permissions": {
                    "type": "object"
                }
            },
            "required": [
                "type",
                "permissions"
            ]
        },
        "PostFragment": {
            "type": "object",
            "properties": {
                "discussionID": {
                    "type": "integer",
                    "description": "The discussion ID of the post."
                },
                "commentID": {
                    "type": "integer",
                    "description": "The comment ID of the post, if any."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The title of the post."
                },
                "url": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The URL of the post."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "The date of the post.",
                    "format": "date-time"
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The author of the post."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                }
            },
            "required": [
                "name",
                "url",
                "dateInserted",
                "insertUserID"
            ]
        },
        "Role": {
            "type": "object",
            "properties": {
                "roleID": {
                    "type": "integer",
                    "description": "ID of the role."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the role."
                },
                "description": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Description of the role."
                },
                "type": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Default type of this role."
                },
                "deletable": {
                    "type": "boolean",
                    "description": "Is the role deletable?"
                },
                "canSession": {
                    "type": "boolean",
                    "description": "Can users in this role start a session?"
                },
                "personalInfo": {
                    "type": "boolean",
                    "description": "Is membership in this role personal information?"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PermissionFragment"
                    }
                }
            },
            "required": [
                "roleID",
                "name",
                "description",
                "type",
                "deletable",
                "canSession",
                "personalInfo"
            ]
        },
        "RoleFragment": {
            "type": "object",
            "properties": {
                "roleID": {
                    "type": "integer",
                    "description": "ID of the role."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the role."
                }
            },
            "required": [
                "roleID",
                "name"
            ]
        },
        "RolePost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the role."
                },
                "description": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Description of the role."
                },
                "type": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Default type of this role."
                },
                "deletable": {
                    "type": "boolean",
                    "description": "Is the role deletable?"
                },
                "canSession": {
                    "type": "boolean",
                    "description": "Can users in this role start a session?"
                },
                "personalInfo": {
                    "type": "boolean",
                    "description": "Is membership in this role personal information?"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PermissionFragment"
                    }
                }
            },
            "required": [
                "name"
            ]
        },
        "SSOData": {
            "type": "object",
            "properties": {
                "authenticatorName": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the authenticator that was used to create this object."
                },
                "authenticatorID": {
                    "type": "string",
                    "minLength": 1,
                    "description": "ID of the authenticator instance that was used to create this object."
                },
                "authenticatorIsTrusted": {
                    "type": "boolean",
                    "description": "If the authenticator is trusted to sync user's information."
                },
                "uniqueID": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Unique ID of the user supplied by the provider."
                },
                "email": {
                    "type": "string",
                    "description": "Email of the user."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user."
                },
                "roles": {
                    "type": "array",
                    "description": "One or more role name.",
                    "items": {
                        "type": "string"
                    },
                    "style": "form"
                },
                "...": {
                    "type": "string",
                    "description": "Any other information."
                }
            },
            "required": [
                "authenticatorName",
                "authenticatorID",
                "authenticatorIsTrusted",
                "uniqueID"
            ],
            "description": "SSOAuthenticator's supplied information."
        },
        "Token": {
            "type": "object",
            "properties": {
                "accessTokenID": {
                    "type": "integer",
                    "description": "The unique numeric ID."
                },
                "name": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "A user-specified label."
                },
                "accessToken": {
                    "type": "string",
                    "minLength": 1,
                    "description": "A signed version of the token."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the token was generated.",
                    "format": "date-time"
                }
            },
            "required": [
                "accessTokenID",
                "name",
                "accessToken",
                "dateInserted"
            ]
        },
        "User": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "ID of the user."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the user."
                },
                "email": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Email address of the user."
                },
                "photoUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "URL to the user photo."
                },
                "emailConfirmed": {
                    "type": "boolean",
                    "description": "Has the email address for this user been confirmed?"
                },
                "showEmail": {
                    "type": "boolean",
                    "description": "Is the email address visible to other users?"
                },
                "bypassSpam": {
                    "type": "boolean",
                    "description": "Should submissions from this user bypass SPAM checks?"
                },
                "banned": {
                    "type": "integer",
                    "description": "Is the user banned?"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the user was created.",
                    "format": "date-time"
                },
                "dateUpdated": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the user was last updated."
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoleFragment"
                    }
                }
            },
            "required": [
                "userID",
                "name",
                "email",
                "photoUrl",
                "emailConfirmed",
                "showEmail",
                "bypassSpam",
                "banned",
                "dateInserted",
                "dateUpdated"
            ]
        },
        "UserFragment": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The ID of the user."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The username of the user."
                },
                "photoUrl": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The URL of the user's avatar picture."
                }
            },
            "required": [
                "userID",
                "name",
                "photoUrl"
            ]
        },
        "UserPatch": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the user."
                },
                "email": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Email address of the user."
                },
                "photo": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Raw photo field value from the user record."
                },
                "emailConfirmed": {
                    "type": "boolean",
                    "description": "Has the email address for this user been confirmed?"
                },
                "bypassSpam": {
                    "type": "boolean",
                    "description": "Should submissions from this user bypass SPAM checks?"
                },
                "roleID": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Roles to set on the user."
                }
            }
        },
        "UserPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the user."
                },
                "email": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Email address of the user."
                },
                "photo": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Raw photo field value from the user record."
                },
                "password": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Password of the user."
                },
                "emailConfirmed": {
                    "default": true,
                    "type": "boolean",
                    "description": "Has the email address for this user been confirmed?"
                },
                "bypassSpam": {
                    "default": false,
                    "type": "boolean",
                    "description": "Should submissions from this user bypass SPAM checks?"
                },
                "roleID": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Roles to set on the user."
                }
            },
            "required": [
                "name",
                "email",
                "password",
                "emailConfirmed",
                "bypassSpam"
            ]
        }
    }
}
